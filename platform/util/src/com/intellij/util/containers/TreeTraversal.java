/*
 * Copyright 2000-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intellij.util.containers;

import com.intellij.openapi.util.Condition;
import com.intellij.openapi.util.Pair;
import com.intellij.util.Function;
import com.intellij.util.Functions;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.Map;

/**
 * A redesigned version of com.google.common.collect.TreeTraversal.
 * <p/>
 * The original JavaDoc:
 * <p/>
 * Views elements of a type {@code T} as nodes in a tree, and provides methods to traverse the trees
 * induced by this traverser.
 *
 * <p>For example, the tree
 *
 * <pre>          {@code
 *          h
 *        / | \
 *       /  e  \
 *      d       g
 *     /|\      |
 *    / | \     f
 *   a  b  c       }</pre>
 *
 * <p>can be iterated over in pre-order (hdabcegf), post-order (abcdefgh), or breadth-first order
 * (hdegabcf).
 *
 * <p>Null nodes are strictly forbidden.
 *
 * @author Louis Wasserman
 * <p/>
 *
 * @author gregsh
 */
public abstract class TreeTraversal {

  private final String debugName;

  protected TreeTraversal(@NotNull String debugName) {
    this.debugName = debugName;
  }

  @NotNull
  public <T> JBIterable<T> traversal(@NotNull final Iterable<? extends T> roots, @NotNull final Function<T, ? extends Iterable<? extends T>> tree) {
    return new JBIterable<T>() {
      @NotNull
      @Override
      public Iterator<T> iterator() {
        return createIterator(roots, tree);
      }
    };
  }

  @NotNull
  public <T> JBIterable<T> traversal(@Nullable final T root, @NotNull final Function<T, ? extends Iterable<? extends T>> tree) {
    return traversal(ContainerUtil.createMaybeSingletonList(root), tree);
  }

  @NotNull
  public <T> Function<T, JBIterable<T>> traversal(@NotNull final Function<T, ? extends Iterable<? extends T>> tree) {
    return new Function<T, JBIterable<T>>() {
      @Override
      public JBIterable<T> fun(T t) {
        return traversal(t, tree);
      }
    };
  }

  /**
   * Creates a new iterator for this type of traversal.
   * @param roots tree roots
   * @param tree tree structure the children for parent function.
   *             May return null (useful for map representation).
   */
  @NotNull
  public abstract <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree);

  @Override
  public String toString() {
    return debugName;
  }

  public static abstract class It<T> extends JBIterator<T> {

  }

  public static abstract class TracingIt<T> extends It<T> {

    @Nullable
    public abstract T parent();

    @NotNull
    public abstract JBIterable<T> backtrace();
  }

  @NotNull
  private static <T> Iterable<? extends T> children(@NotNull T root, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
    return JBIterable.from(tree.fun(root));
  }

  /**
   * Returns an iterator over the nodes in a tree structure, using pre-order
   * traversal. That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by {@link #children} are advanced.
   */
  @NotNull
  public static final TreeTraversal PRE_ORDER_DFS = new TreeTraversal("PRE_ORDER_DFS") {
    @NotNull
    @Override
    public <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
      return new PreOrderIt<T>(roots, tree);
    }
  };

  /**
   * Returns an iterator over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   * <p/>
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by {@link #children} are advanced.
   */
  @NotNull
  public static final TreeTraversal POST_ORDER_DFS = new TreeTraversal("POST_ORDER_DFS") {
    @NotNull
    @Override
    public <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
      return new PostOrderIt<T>(roots, tree);
    }
  };


  @NotNull
  public static final TreeTraversal LEAVES_ONLY_DFS = new TreeTraversal("LEAVES_ONLY_DFS") {
    @NotNull
    @Override
    public <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
      return new LeavesDfsIt<T>(roots, tree);
    }
  };

  /**
   * Returns an iterator over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   * <p/>
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by {@link #children} are advanced.
   */
  @NotNull
  public static final TreeTraversal PLAIN_BFS = new TreeTraversal("PLAIN_BFS") {
    @NotNull
    @Override
    public <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
      return new BfsIterator<T>(roots, tree);
    }
  };

  @NotNull
  public static final TreeTraversal TRACING_BFS = new TreeTraversal("TRACING_BFS") {
    @NotNull
    @Override
    public <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
      return new TracingBfsIt<T>(roots, tree);
    }
  };

  @NotNull
  public static final TreeTraversal LEAVES_ONLY_BFS = new TreeTraversal("LEAVES_ONLY_BFS") {
    @NotNull
    @Override
    public <T> It<T> createIterator(@NotNull Iterable<? extends T> roots, @NotNull Function<T, ? extends Iterable<? extends T>> tree) {
      return new LeavesBfsIt<T>(roots, tree);
    }
  };


  // -----------------------------------------------------------------------------
  // Iterators
  // -----------------------------------------------------------------------------

  private abstract static class DfsIt<T> extends TracingIt<T> {
    final ArrayDeque<Pair<T, Iterator<? extends T>>> stack = new ArrayDeque<Pair<T, Iterator<? extends T>>>();

    @Nullable
    public T parent() {
      Iterator<Pair<T, Iterator<? extends T>>> it = stack.descendingIterator();
      it.next();
      return it.hasNext() ? it.next().first : null;
    }

    @NotNull
    public JBIterable<T> backtrace() {
      return new JBIterable<Pair<T, Iterator<? extends T>>>() {
        @Override
        public Iterator<Pair<T, Iterator<? extends T>>> iterator() {
          Iterator<Pair<T, Iterator<? extends T>>> iterator = stack.descendingIterator();
          iterator.next();
          return iterator;
        }
      }.transform(Functions.<T>pairFirst()).filter(Condition.NOT_NULL);
    }
  }

  private final static class PreOrderIt<T> extends DfsIt<T> {

    final Function<T, ? extends Iterable<? extends T>> tree;
    int doneCount;

    PreOrderIt(@NotNull Iterable<? extends T> roots, Function<T, ? extends Iterable<? extends T>> tree) {
      this.tree = tree;
      Iterator<? extends T> iterator = roots.iterator();
      if (iterator.hasNext()) {
        stack.addLast(Pair.<T, Iterator<? extends T>>create(null, iterator));
      }
    }

    @Override
    public T nextImpl() {
      if (stack.size() <= doneCount) return stop();
      Pair<T, Iterator<? extends T>> top;
      while (!(top = stack.getLast()).second.hasNext()) {
        stack.removeLast();
        doneCount--;
      }
      T result = top.second.next();
      if (!top.second.hasNext()) doneCount++;
      Iterator<? extends T> childItr = children(result, tree).iterator();
      stack.addLast(Pair.<T, Iterator<? extends T>>create(result, childItr));
      if (!childItr.hasNext()) doneCount++;
      return result;
    }
  }

  private static final class PostOrderIt<T> extends DfsIt<T> {

    final Function<T, ? extends Iterable<? extends T>> tree;

    PostOrderIt(@NotNull Iterable<? extends T> roots, Function<T, ? extends Iterable<? extends T>> tree) {
      this.tree = tree;
      for (T root : roots) {
        stack.addLast(Pair.<T, Iterator<? extends T>>create(root, children(root, tree).iterator()));
      }
    }

    @Override
    public T nextImpl() {
      while (!stack.isEmpty()) {
        Pair<T, Iterator<? extends T>> top = stack.getLast();
        if (top.second.hasNext()) {
          T child = top.second.next();
          stack.addLast(Pair.<T, Iterator<? extends T>>create(child, children(child, tree).iterator()));
        }
        else {
          stack.removeLast();
          return top.first;
        }
      }
      return stop();
    }
  }

  private final static class LeavesDfsIt<T> extends DfsIt<T> {

    final Function<T, ? extends Iterable<? extends T>> tree;

    LeavesDfsIt(@NotNull Iterable<? extends T> roots, Function<T, ? extends Iterable<? extends T>> tree) {
      this.tree = tree;
      for (T root : roots) {
        Iterator<? extends T> childrenIt = children(root, tree).iterator();
        stack.addLast(Pair.<T, Iterator<? extends T>>create(root, childrenIt.hasNext() ? childrenIt : null));
      }
    }

    @Override
    public T nextImpl() {
      while (!stack.isEmpty()) {
        Pair<T, Iterator<? extends T>> top = stack.getLast();
        if (top.second != null && top.second.hasNext()) {
          T child = top.second.next();
          Iterator<? extends T> childrenIt = children(child, tree).iterator();
          if (childrenIt.hasNext()) {
            stack.addLast(Pair.<T, Iterator<? extends T>>create(child, childrenIt));
          }
          else {
            return child;
          }
        }
        else {
          stack.removeLast();
          if (top.second == null) return top.first;
        }
      }
      return stop();
    }
  }

  private static final class BfsIterator<T> extends It<T> {

    final Function<T, ? extends Iterable<? extends T>> tree;
    final ArrayDeque<T> queue = new ArrayDeque<T>();

    BfsIterator(@NotNull Iterable<? extends T> roots, Function<T, ? extends Iterable<? extends T>> tree) {
      this.tree = tree;
      JBIterable.from(roots).addAllTo(queue);
    }

    @Override
    public T nextImpl() {
      if (queue.isEmpty()) return stop();
      T result = queue.remove();
      for (T t : children(result, tree)) queue.add(t);
      return result;
    }
  }

  private static final class LeavesBfsIt<T> extends It<T> {

    final Function<T, ? extends Iterable<? extends T>> tree;
    final ArrayDeque<T> queue = new ArrayDeque<T>();

    LeavesBfsIt(@NotNull Iterable<? extends T> roots, Function<T, ? extends Iterable<? extends T>> tree) {
      this.tree = tree;
      JBIterable.from(roots).addAllTo(queue);
    }

    @Override
    public T nextImpl() {
      while (!queue.isEmpty()) {
        T result = queue.remove();
        Iterator<? extends T> childrenIt = children(result, tree).iterator();
        if (!childrenIt.hasNext()) return result;
        while (childrenIt.hasNext()) queue.add(childrenIt.next());
      }
      return stop();
    }
  }

  private final static class TracingBfsIt<T> extends TracingIt<T> {

    final Function<T, ? extends Iterable<? extends T>> tree;
    final ArrayDeque<T> queue = new ArrayDeque<T>();
    final Map<T, T> paths = ContainerUtil.newTroveMap(ContainerUtil.<T>identityStrategy());
    T cur;

    TracingBfsIt(@NotNull Iterable<? extends T> roots, Function<T, ? extends Iterable<? extends T>> tree) {
      this.tree = tree;
      JBIterable.from(roots).addAllTo(queue);
    }

    @Override
    public T nextImpl() {
      if (queue.isEmpty()) return stop();
      T result = queue.remove();
      for (T t : children(result, tree)) {
        if (paths.containsKey(t)) continue;
        queue.add(t);
        paths.put(t, result);
      }
      return cur = result;
    }

    @Override
    public T parent() {
      return paths.get(cur);
    }

    @NotNull
    @Override
    public JBIterable<T> backtrace() {
      final T first = cur;
      return new JBIterable<T>() {
        @Override
        public Iterator<T> iterator() {
          return new JBIterator<T>() {
            T cur = first;

            @Override
            public T nextImpl() {
              if (cur == null) return stop();
              T result = cur;
              cur = paths.get(cur);
              return result;
            }
          };
        }
      };
    }
  }
}
